/**
 * Композабл для управления темами оформления приложения
 *
 * @description Предоставляет функциональность для работы с различными режимами
 * отображения (детский, семейный, родительский) включая сохранение выбора
 * пользователя в localStorage и применение соответствующих CSS-атрибутов
 */

import type { BodyMode } from "@/types/theme";

/**
 * Хук для работы с темами приложения
 *
 * @returns {Object} Объект с методами для управления темами
 */
export const useTheme = () => {
  // Ключ для сохранения выбора темы в localStorage
  const STORAGE_KEY = "palette";

  /**
   * Устанавливает тему оформления приложения
   *
   * @param {BodyMode} type - Тип темы для применения
   * @description Метод выполняет следующие действия:
   * 1. Очищает предыдущие атрибуты темы с элемента <html>
   * 2. Устанавливает новый атрибут data-theme для режимов 'child' и 'parent'
   * 3. Для режима 'family' атрибут не устанавливается (базовая тема)
   * 4. Сохраняет выбор пользователя в localStorage для последующих сессий
   */
  const setTheme = (type: BodyMode): void => {
    // Получаем ссылку на корневой элемент документа
    const html = document.documentElement;

    // Очищаем предыдущие атрибуты темы
    html.removeAttribute("data-theme");

    // Применяем атрибут темы только для специфических режимов
    // Семейный режим использует базовое оформление без дополнительных атрибутов
    if (type === "child" || type === "parent") {
      html.setAttribute("data-theme", type);
    }

    // Сохраняет выбор пользователя в localStorage для восстановления при следующем визите
    localStorage.setItem(STORAGE_KEY, type);
  };

  /**
   * Получает сохраненную тему из localStorage
   *
   * @returns {BodyMode | null} Сохраненная тема или null, если ничего не сохранено
   * @description Извлекает ранее выбранную пользователем тему из локального хранилища
   */
  const getStoredTheme = (): BodyMode | null => {
    const stored = localStorage.getItem(STORAGE_KEY);
    // Приводим к типу BodyMode, предполагая что в storage сохранены только валидные значения
    return stored as BodyMode | null;
  };

  /**
   * Инициализирует тему при загрузке приложения
   *
   * @description Восстанавливает ранее выбранную пользователем тему
   * из localStorage. Если сохраненной темы нет, используется базовая тема
   */
  const initTheme = () => {
    const storedTheme = getStoredTheme();

    // Применяем сохраненную тему, если она существует
    if (storedTheme) {
      setTheme(storedTheme);
    }
    // Если сохраненной темы нет, остается базовое оформление
  };

  // Возвращаем публичный API композабла
  return {
    /**
     * Устанавливает новую тему и сохраняет выбор
     */
    setTheme,

    /**
     * Инициализирует тему из сохраненных данных
     */
    initTheme,

    /**
     * Получает текущую сохраненную тему
     */
    getStoredTheme,
  };
};
